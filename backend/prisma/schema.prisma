// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  email             String   @unique
  password          String
  phone             String?
  role              UserRole @default(PARTICIPANT)
  profileImage      String?
  isActive          Boolean  @default(true)
  lastLogin         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  registration      Registration?
  payments          Payment[]
  checkIns          CheckIn[]
  activityLogs      ActivityLog[]
  sentNotifications Notification[] @relation("SentNotifications")
  receivedNotifications NotificationRecipient[]
  createdCommittees Committee[] @relation("CreatedBy")
  createdEvents     Event[] @relation("CreatedBy")
  uploadedResources Resource[] @relation("UploadedBy")

  @@map("users")
}

model Registration {
  id                    String   @id @default(uuid())
  userId                String   @unique
  firstName             String
  lastName              String
  email                 String
  phone                 String
  gender                Gender
  isKumaraguru          Boolean
  rollNumber            String?
  institutionType       InstitutionType?
  institution           String?
  grade                 String?
  totalMuns             String
  committeePreference1  String
  portfolioPreference1  String
  committeePreference2  String
  portfolioPreference2  String
  committeePreference3  String
  portfolioPreference3  String
  idDocument            String
  munResume             String?
  status                RegistrationStatus @default(PENDING)
  allocatedCommittee    String?
  allocatedPortfolio    String?
  paymentStatus         PaymentStatus @default(PENDING)
  submittedAt           DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocation            Allocation?

  @@map("registrations")
}

model Committee {
  id              String   @id @default(uuid())
  name            String   @unique
  shortName       String
  agenda          String
  level           CommitteeLevel
  description     String
  backgroundGuide String?
  logo            String?
  isActive        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creator         User @relation("CreatedBy", fields: [createdBy], references: [id])
  portfolios      Portfolio[]
  allocations     Allocation[]

  @@map("committees")
}

model Portfolio {
  id          String   @id @default(uuid())
  committeeId String
  name        String
  isAllocated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  allocations Allocation[]

  @@unique([committeeId, name])
  @@map("portfolios")
}

model Allocation {
  id             String   @id @default(uuid())
  registrationId String   @unique
  committeeId    String
  portfolioId    String
  allocatedBy    String
  allocatedAt    DateTime @default(now())

  // Relations
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  committee      Committee @relation(fields: [committeeId], references: [id])
  portfolio      Portfolio @relation(fields: [portfolioId], references: [id])

  @@map("allocations")
}

model Payment {
  id                String        @id @default(uuid())
  userId            String
  registrationId    String?
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  invoiceUrl        String?
  failureReason     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model CheckIn {
  id          String      @id @default(uuid())
  userId      String
  type        CheckInType
  status      CheckInStatus
  markedBy    String
  markedAt    DateTime    @default(now())
  location    String?
  notes       String?

  // Relations
  user        User @relation(fields: [userId], references: [id])

  @@map("check_ins")
}

model ContactSubmission {
  id          String              @id @default(uuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      ContactStatus       @default(PENDING)
  resolvedBy  String?
  resolvedAt  DateTime?
  submittedAt DateTime            @default(now())

  @@map("contact_submissions")
}

model Notification {
  id              String   @id @default(uuid())
  title           String
  content         String
  type            NotificationType
  priority        NotificationPriority @default(NORMAL)
  targetAudience  TargetAudience
  specificUsers   String[] @default([])
  sentBy          String
  sentAt          DateTime @default(now())
  expiresAt       DateTime?

  // Relations
  sender          User @relation("SentNotifications", fields: [sentBy], references: [id])
  recipients      NotificationRecipient[]

  @@map("notifications")
}

model NotificationRecipient {
  id             String   @id @default(uuid())
  notificationId String
  userId         String
  isRead         Boolean  @default(false)
  readAt         DateTime?

  // Relations
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@map("notification_recipients")
}

model Event {
  id          String      @id @default(uuid())
  name        String
  description String?
  date        DateTime
  startTime   String
  endTime     String
  status      EventStatus @default(SCHEDULED)
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  creator     User @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("events")
}

model Resource {
  id          String       @id @default(uuid())
  title       String
  description String
  type        ResourceType
  format      String
  size        String
  url         String
  downloads   Int          @default(0)
  uploadedBy  String
  uploadedAt  DateTime     @default(now())

  // Relations
  uploader    User @relation("UploadedBy", fields: [uploadedBy], references: [id])

  @@map("resources")
}

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  // Relations
  user        User @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model EmailTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String[] @default([])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

// Enums
enum UserRole {
  PARTICIPANT
  EXECUTIVE_BOARD
  SOFTWARE_ADMIN
  REGISTRATION_ADMIN
  HOSPITALITY_ADMIN
  ALLOCATION_ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum InstitutionType {
  SCHOOL
  COLLEGE
  COMPANY
}

enum RegistrationStatus {
  PENDING
  SHORTLISTED
  CONFIRMED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CommitteeLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CheckInType {
  CONFERENCE
  ACCOMMODATION
}

enum CheckInStatus {
  CHECKED_IN
  CHECKED_OUT
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TargetAudience {
  ALL
  PAID
  UNPAID
  ALLOCATED
  UNALLOCATED
  SPECIFIC
}

enum EventStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ResourceType {
  GUIDES
  RULES
  TEMPLATES
  VIDEOS
  OTHER
}